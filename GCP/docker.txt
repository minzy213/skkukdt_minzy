+ VPC 네트워크
 : 우리가 흔히 생각하는 네트워크의 가상화 버전
+ 특징
 - VPC 네트워크는 연결된 라우터와 방화벽 규칙을 포함하고 있는 전역 리소스
 - 서브넷은 지역 리소스, 각 서브넷을 CIDR을 이용해서 IP 주소 범위를 지정
 
 - 인스턴스로 송수신 되는 트래픽은 방화벽 규칙으로 제어
 - 내부 IP 주소가 있는 인스턴스는 Google API 및 서비스와 통신할 수 있다.
 
 - 각 프로젝트는 사전 정의된 default 네트워크롤 시작을 하며,
 커스텀(사용자 정의) 네트워크를 선택하여 시작할 수 있다.
 
+ 방화벽 규칙
 : 사용자가 구성할 수 있는 가상의 방화벽
 - VPC 네트워크 수준에서 정의된다. 규칙 자체는 네트워크 간에 공유될 수 없다.
 - IPv4 트래픽만 지원, 대상을 지정할 때는 CIDR 표기법을 사용.
 - 수행되는 작업 허용(allow), 거부(deny)중 하나.
 - 수행되는 트래픽은 수신(ingress), 송신(egress) 모두 적용되도록 정의.
 - 우선순위가 존재 : 0~65535 사이의 정수. 수가 낮을수록 높은 우선순위.
           : default는 1000


-----
+ DBMS
  1. 관계형 데이터베이스 (Relational Database)
    1) 2차원 구조의 모델을 기반 ex) excel sheet
	2) 데이터 무결성, 트랜젝션 처리 등 데이터베이스 관리 시스템에서 뛰어난 성능
	3) 질의어(SQL)를 사용한 데이터 접근
	
  2. 객체지향형 데이터베이스 (Object Oriented)
    1) 사용자가 정의한 사용자 정의 타입을 지원
	2) 비정형 복합 정보의 모델링 가능
	3) 객체들 사이의 참조(reference) 구조를 이용한 접근이 가능
	4) 많은 객체지향 프로그래밍 언어들과 스키마 구조가 비슷
  
  3. 객체관계형 데이터베이스 (Object-relational) (잘 사용하지 않음)
    1) 사용자 정의 타입을 지원
	2) 참조 타입 지원
	3) 중첩 테이블 지원
	4) 대단위 객체 저장, 추출이 가능
	5) 객체간 상속 관계 지원

----

+ 도커 엔진
  1. client : 도커 명령을 받고, 결과를 출력하는 역할
  2. server : 도커 데몬을 이용해서 컨테이너 시작, 운영, 정지 등을 담당
  
-----
+mysql
docker pull mysql:5.7
docker images
docker run -d --rm --name mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7
docker ps

docker exec -it [CONTAINER ID]
==> container 환경
ls
mysql -u root -p
123456
==> mysql 환경
exit
==> container환경
ctrl+p q => container 종료하지 않고 잠깐 나가기
==> host os 환경
 # container가 가지고 있는 ipaddress 가져오기
docker inspect mysql | grep IPAddress
docker exec -it mysql bash
==> container 환경
exit
==> host os 환경
docker stop mysql # mysql 끄기?

---

Dockerfile 빌드
# make base image
FROM ubuntu:18.04

# apach2 package install
RUN apt-get update && apt-get -y install apache2

# default page setting
RUN echo '<h1>Docker Container - Web Application.</h1>' > /var/www/html/index.html

# make working directory
RUN mkdir /webapp

# environment variable, directory, exec service, etc. for apache2-> save as shell script 
RUN echo './etc/apache2/envvars' > /webapp/run_http.sh && \
	echo 'mkdir -p /var/run/apache2' >> /webapp/run_http.sh && \
	echo 'mkdir -p /var/lock/apache2' >> /webapp/run_http.sh && \
	echo '/usr/sbin/apache2 -D FOREGROUND' >> /webapp/run_http.sh &&\
	chmod 744 /webapp/run_http.sh

# open port : 80
EXPOSE 80

# execute shell script by RUN when container starts
CMD /webapp/run_http.sh
---

 DOCKER_BUILDKIT ==> 병렬처리해서 빠르게 빌드
 DOCKER_BUILDKIT = 1 docker build -t webapp:1.0 . #'.'은 현재 경로
docker run -itd -p 8001:80 --name=webapp01 webapp:1.0# 방금 만든거 run, 8001 포트를 http(80)으로 사용.
