systemctl status sshd
	ssh 연결 되는지 확인
ssh
cal : calender 출력
ps : process 확인
	-ef : 지금까지 뭐했는지 기록
pwd : 현재 디렉토리 출력
whoami : 내 계정 이름 확인
yum : pip, conda 같은거.
clear : 화면 지워라
sudo : 관리자권한
history : 히스토리 볼 수 있다.
# : 주석, 
메타 문자 : shell이 특별한 의미로 해석하는 문자.
	문자로 쓰고싶으면 '문자 처리'하거나 \ escape code를 앞에 붙인다.
	* : all
	> < : redirection(입출력 재지정)
	$PATH : path 출력
	
	
tree : 파일 구조 볼 수 있다. 
	-t : 디렉토리만 본다. 
	-L 2 : 지정 수준(2)까지만 출력
	-P *.tar.gz : 패턴 지정 구조 출력
touch a.txt : a.txt 파일 생성. 빈 파일을 만들어준다.
ls : 파일 리스트 표출
	man ls : ls 설명. man = manual
	ls -1 : 상세정보 표출
	ls -a : 숨김 파일 표출(파일 앞에 . 찍으면 숨김파일 된다.)0
	ls -l a.txt : a.txt만 표출. directory 찍으면 안에 파일 몇개 있는지 알려준다.
	ls ./tmp : 현재 하위폴더인 tmp 아래에 있는 파일 리스트 표출
mkdir : directory 생성
	mkdir a/b/c/d/e -p : a/b/c/d/e 모두 생성
rmdir : directory 삭제
	rm a -r : a/b/c/d/e 모두 삭제
	rm * -r : 현재 디렉토리 모두 삭제
mv a b : 파일을 a에서 b로 이동, 이름 바꾸기(b가 없으면 b로 이름을 바꾼다)
	삭제할 수 있는 권한이 있는 파일만 mv할 수 있다.
cp a b : a를 b로 복사해	
usermod -aG wheel centos : centos를 관리자 그룹에 넣겠다!
# 파일 관련
cat : concatenate의 약자. txt 파일 내용을 출력해서 보고 싶을 때 사용
	-n, -b : line number 붙여서 출력. n은 공백도 붙여줌, b는 공백은 안붙여줌
	> a.txt : 출력 방향 지정. 입력 끝날때까지 기다렸다가 내가 쓰는걸 a.txt에 저장해. ctrl+D 하면 끝.
	>> a.txt : 이어쓰기
	< a.txt : a.txt 입력받아서 출력
	<<char : char 입력받으면 끝
	cat < e.txt > e_copied.txt : e.txt를 cat으로 입력받아서 e_copied.txt로 출력 == 복사
	
	
	
file : 파일 설명 출력
head : 위에 열줄만 출력
tail : 아래 열줄만 출력
wc : word count. shape. line수, 단어 수, 문자 수
	-l : line
	-w : 단어
	-c : 문자
more/less : 파일의 내용을 한 단위로 끊어서 보여주는 기능. 
	q 하면 끝남, 다음페이지는 스페이스바, 다음줄은 엔터, b는 이전 페이지
	/mail : mail 검색, n 누르면 다음 검색
	! : shell 명령어 쓸 수 있다.
	!bash : shell로 나간다. 아직 more는 실행중
	exit : bash shell 끝낸다.
echo : 출력인데 안기다린다.
; : 여러 명령을 동시에 실행

|(pipe)
 : pipe 앞의 명령의 실행 결과를 pipe 뒤의 입력으로 전달.
 : pipe 왼쪽은 출력이 가능해야 하고, 파이프 오른쪽은 입력이 가능해야 함에 유의!
 : 명령들을 조합해서 사용할 수 있어서 많이 사용.
   실행 순서는 앞에서 뒤로, 다만 파이프를 통해서 오른쪽으로 전달되는 것.
 ex) head -n 10 passwd : passwd를 10줄만 출력
     cat -n passwd : passwd를 줄번호와 함께 출력
	 head -n 10 passwd | cat -n ==> passwd를 줄번호와 함께 10줄만 출력
	 cat -n | head -n 10 passwd ==> 위와 동일한 기능! 둘 다 출력이라서 줄 번호 먼저 붙이든 10개 자르든 동일.
	 
grep : get regular expression
 : 특정한 문자열을 포함하고 있는 라인을 찾기 위해서 사용
 grep [-옵션][패턴][파일]
	-i : ignoreCase 대소문자 무시하고 찾아준다
 파일에서 찾기
	1) 문자열로 찾기 : grep nologin passwd : passwd에서 nologin 찾아준다.
	2) 정규표현식으로 찾기
	
tr : 문자 치환 명령어. 문자 하나씩 바꾼다.
	-d : delete, do not translate
	tr a-z A-Z : 소문자 > 대문자 치환
	
## 파일 검색 명령어
1. find [path] [expression] [action]
	action : 찾은 결과를 어떻게 처리할 것인가.
			 default : print
	* /etc 디렉토리 하위에 확장자명이 .conf인 파일 찾기
	  find /etc -name '*.conf'
	* /usr/bin 디렉토리 하위에 크기가 10k 이상, 100k 미만인 파일 찾기
	  find /usr/bin -size +10k -size -100k
2. whereis command(s)
	$PATH 변수(환경변수)와 관계 없이 검색
	-b : binary만 찾는다
	-m : manual만 찾는다
3. which command(s)
	$PATH 변수에 등록되어 있는 명령어 검색
	alias(바로가기) 설정되어 있는 것도 검색
	

+ vi 편집기 mode
 1. 명령어 모드 : vi 편집기의 기본 모드(편집 명령어 ex. 커서 이동 등)
	u : undo
	dd : 해당 라인 삭제
	yy : copy
	p : paste
 2. 입력 모드 : 키보드 a, i, o, s 등 입력 후 - 입력 명령어 사용 가능
	a : 다음 자리로 이동
	A : 맨 뒤로 이동
	i : 그 자리에서 끼워넣기
	I : 맨 앞으로 이동
	o : 줄바꿈
	O : 윗줄로 이동하고 줄바꿈
	s : 현재 자리 삭제
	S : 현재 줄 삭제
	ctrl + u : undo
 3. 확장 모드 (ex 모드, last line 모드) : 콜론(:) 입력 후 화면 가장 아래쪽에 명령어 입력
 : 각 모드에서 사용할 수 있는 명령어는 정해져 있으며, 명령어 모드가 가장 적다.
	:w a.txt : write
	:q! : 저장하지 않고 나가기
	:wq : 저장하고 나가기
	:set number : line number 표시
	5, 10s/x/X/g : 5줄 - 10줄에서 x 찾아서 X로 바꾼다. /g는 해당 라인 다 바꾼다.
	
+ 각 모드 사이의 전환
 명령모드 => 입력모드 전환 : 입력 모드 명령어 중 하나를 입력
 입력모드 => 명령모드 전환 : esc키 입력
 명령모드 => 확장모드 전환 : 반드시 명령모드로 전환 후 확장모드 명령어(:) 입력
 
+ vi 편집기 명령어 중 반복할 수 있는 명령어 앞에 숫자를 붙일 수 있다.