+ 리눅스

+ 사용자 인터페이스
1. GUI(Graphic User Interface)
  - X window 패키지 : 리눅스의 GUI 환경
  - GNOME, KDE, TWIM : X window 환경을 관리하기 위한 인터페이스
2. Text Mode
  - CLI(Command Line Interface), CUI(Character User Interface), TUI(Text User Interface)

+ 리눅스 계정
  - 리눅스는 보안을 위해 로그인 시 PW 요구한다.
  - 유닉스나 리눅스에서는 기본적으로 세가지 형태의 계정이 있다.
	system > root > 일반사용자
    1) root : 관리자 계정. 거의 모든 권한을 행사할 수 있으며, 시스템 관리 목적의 계정.
	2) system : 시스템 운영에 사용되는 계정. 정상적인 로그인은 불가.
	3) 일반사용자 : 필요에 따라 일반 사용자 계정을 만들고 로그인을 허락할 수 있다.
				보안상의 이유로 시스템 사용에 많은 제약이 있음
+ su(Substitute User / Switch User) 
 : 다른 계정으로 변경하는 명령어

------------------------------------------------------------------------------------------

+ 리눅스 명령어
 : 파일이나 디렉토리 조작, 어플리케이션 실행, 시스템 설정, 정보 표시 같은 대부분의 동작을 명령어 입력으로 가능하다.
  (*명령어는 대소문자를 철저히 구분한다.)
  
1. 기본 명령어 형태
  $ 명령어 [-옵션1 (인수)] [-옵션2 (인수)] [-옵션3 (인수)]:
    명령어와 옵션의 기본 구분은 공백
	옵션과 인수의 구분은 "-"
	
2. 명령어 분류
  1) shell 내장 명령어
    1-1) shell : 명령어 해석기로의 역할
	  리눅스 명령어(ls) --- shell이 번역 --- kernel이 처리 --> CPU
  2) 외부 명령어 : 주로 bin이라는 이름의 디렉토리에 존재하는 명령어(환경변수 echo $PATH)
  
+ 파일과 디렉토리
 : 컴퓨터가 다루는 데이터는 텍스트, 영상, 음성, 전자 메일 등 종류가 다양하지만 리눅스는 이 모두를 파일이라는 개념으로 취급.
   -> 데이터 형식이 달라도 파일이라는 추상화된 통일된 개념을 사용하면 기본 조작 방법이 모두 같아져서 편리해짐
 : 디렉토리 : 파일이 모여있는 공간, 디렉토리 안에 디렉토리를 만들 수 있으므로 계층구조가 된다 => 트리 구조
 : 제일 위에 있는 디렉토리는 root 디렉토리

+ PATH
 : 사용자는 반드시 트리 구조 어딘가에 존재하는 디렉토리에서 작업한다.
 : 현재 디렉토리에 있는 파일과 디렉토리만 사용자가 직접 조작 가능하므로 현재 디렉토리에 없는 파일과 디렉토리는 다음과 같은 방법으로 사용
   1) 조작 대상이 존재하는 디렉토리로 이동해서 작업
   2) 조작 대상을 지정할 때 경로까지 지정
 : 두 가지 방법 모두 대상이 어디에 존재하는지 알려주는 경로 정보 필요 => PATH
 
 - 절대경로 : 파일 및 디렉토리 위치를 '/'(루트) 기준으로 표시
 - 상대경로 : 파일 및 디렉토리 위치를 '.'(현재 디렉토리) 기준으로 표시 (권장)
   
+ redirection (입출력 방향 재지정)
 file descriptor : 열려 있는 파일에 대한 식별자(생략 가능)
   0 : 표준 입력(stdin)
   1 : 표준 출력(stdout)
   2 : 표준 에러(stderr)
   
 1>  : 출력방향 전환 (표준출력 -> file). file이 존재한다면 overwrite
 1>> : 출력방향 전환 (표준출력 -> file). file이 존재한다면 append
 
 0<  : 입력방향 전환 (표준입력 <- file). 입력을 키보드가 아닌 파일에서 받아들인다.
 0<<char(here document) : char(문자열)이 들어오면 입력을 닫기.
					   : EOF(End Of File)
 2>  : 에러 출력방향 전환 (표준에러 -> file). file이 존재한다면 overwrite
 2>> : 에러 출력방향 전환 (표준에러 -> file). file이 존재한다면 append
   
+ |(pipe)
 : pipe 앞의 명령의 실행 결과를 pipe 뒤의 입력으로 전달.
 : pipe 왼쪽은 출력이 가능해야 하고, 파이프 오른쪽은 입력이 가능해야 함에 유의!
 : 명령들을 조합해서 사용할 수 있어서 많이 사용.
   실행 순서는 앞에서 뒤로, 다만 파이프를 통해서 오른쪽으로 전달되는 것.
 ex) head -n 10 passwd : passwd를 10줄만 출력
     cat -n passwd : passwd를 줄번호와 함께 출력
	 head -n 10 passwd | cat -n ==> passwd를 줄번호와 함께 10줄만 출력
	 cat -n | head -n 10 passwd ==> 위와 동일한 기능! 둘 다 출력이라서 줄 번호 먼저 붙이든 10개 자르든 동일.
	 
+ 파일 검색 명령어
1. find [path] [expression] [action]
	action : 찾은 결과를 어떻게 처리할 것인가.
			 default : print
	* /etc 디렉토리 하위에 확장자명이 .conf인 파일 찾기
	  find /etc -name '*.conf'
	* /usr/bin 디렉토리 하위에 크기가 10k 이상, 100k 미만인 파일 찾기
	  find /usr/bin -size +10k -size -100k
2. whereis command(s)
	$PATH 변수(환경변수)와 관계 없이 검색
	-b : binary만 찾는다
	-m : manual만 찾는다
3. which command(s)
	$PATH 변수에 등록되어 있는 명령어 검색
	alias(바로가기) 설정되어 있는 것도 검색
	
---------------------------------------------------------------------

+ 편집기
 Unix 텍스트 모드에서 사용되는 편집기. vi, emacs, nano, pico 등이 있음
 - nano : 쉽고 간단. 간단한 편집 유틸리티
 - vi(m) : 가장 널리 사용되는 대중적인 편집기
 - emacs : 강력한 편집 기능을 제공, vi편집기보다 더 크고 복잡.
 
+ vi 편집기 mode
 1. 명령어 모드 : vi 편집기의 기본 모드(편집 명령어 ex. 커서 이동 등)
	u : undo
	dd : 해당 라인 삭제
	yy : copy
	p : paste
 2. 입력 모드 : 키보드 a, i, o, s 등 입력 후 - 입력 명령어 사용 가능
	a : 다음 자리로 이동
	A : 맨 뒤로 이동
	i : 그 자리에서 끼워넣기
	I : 맨 앞으로 이동
	o : 줄바꿈
	O : 윗줄로 이동하고 줄바꿈
	s : 현재 자리 삭제
	S : 현재 줄 삭제
	ctrl + u : undo
 3. 확장 모드 (ex 모드, last line 모드) : 콜론(:) 입력 후 화면 가장 아래쪽에 명령어 입력
 : 각 모드에서 사용할 수 있는 명령어는 정해져 있으며, 명령어 모드가 가장 적다.
	:w a.txt : write
	:q! : 저장하지 않고 나가기
	:wq : 저장하고 나가기
	:set number : line number 표시
	5, 10s/x/X/g : 5줄 - 10줄에서 x 찾아서 X로 바꾼다. /g는 해당 라인 다 바꾼다.
	
+ 각 모드 사이의 전환
 명령모드 => 입력모드 전환 : 입력 모드 명령어 중 하나를 입력
 입력모드 => 명령모드 전환 : esc키 입력
 명령모드 => 확장모드 전환 : 반드시 명령모드로 전환 후 확장모드 명령어(:) 입력
 
+ vi 편집기 명령어 중 반복할 수 있는 명령어 앞에 숫자를 붙일 수 있다.